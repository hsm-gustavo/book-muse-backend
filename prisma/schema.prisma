// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  passwordHash   String
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  reviews      Review[]
  likedReviews ReviewLike[]
  following    UserFollow[]     @relation("Following")
  followers    UserFollow[]     @relation("Followers")
  bookStatuses UserBookStatus[]
}

model Review {
  id            String   @id @default(uuid())
  title         String
  description   String
  rating        Float // 0.0 to 5.0
  openLibraryId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  likes ReviewLike[]
}

model ReviewLike {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String

  createdAt DateTime @default(now())

  @@id([userId, reviewId])
}

model UserFollow {
  follower   User   @relation("Following", fields: [followerId], references: [id])
  followerId String

  followed   User   @relation("Followers", fields: [followedId], references: [id])
  followedId String

  createdAt DateTime @default(now())

  @@id([followerId, followedId])
}

model UserBookStatus {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  openLibraryId String
  status        ReadingStatus
  updatedAt     DateTime      @updatedAt

  @@unique([userId, openLibraryId])
}

enum ReadingStatus {
  reading
  read
  want_to_read
  abandoned
}
